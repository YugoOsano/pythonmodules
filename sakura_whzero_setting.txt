Google Cloud Platform
https://console.cloud.google.com/

Select Compute engine -> VM instance from left panel
Click the instance name to move to setting page
-> Press [Edit] (with pen icon) to update the setting
-> update ssh public key (typically copy & paste id_rsa.pub)

ssh to log into the instance:
ssh -i ./.ssh/id_rsa [user name registered in id_rsa.pub]@[external IP]

gcloud log is stored at:
~/.config/gcloud/logs/...

update gcloud
sudo /home/yugo/software/google-cloud-sdk/bin/gcloud components update

use of gcloud command needs authentification:
https://qiita.com/average_nobody/items/87eb9ab434ab9d9f8637
Simply, type
gcloud auth login
and follow the direction. To verify authentification, type
gcloud compute instances list


[package install]

https://linuxize.com/post/how-to-install-gcc-compiler-on-debian-10/
sudo apt install build-essential (gcc6)

how to get package unfound by apt
https://qiita.com/kon_yu/items/8ac350f3951f8534c931
-y option lets all questions be skipped by yes
sudo apt install apt-file
sudo apt-file update
sudo apt-get install -y software-properties-common

to search package:
apt-cache pkgnames | grep [any name]

apt repository addition/removal
PPA stands for Personal Package Archive; it means non-standard software
https://askubuntu.com/questions/307/how-can-ppas-be-removed
sudo add-apt-repository ppa:[repository name]/ppa
sudo add-apt-repository --remove ppa:[repository-name]/ppa

sudo ppa-purge ppa:[repository name]/ppa
 is safer alternative (after installing ppa-purge)

to install latest packages like gcc-8:
insert the following to /etc/apt/sources.list
deb http://ftp.debian.org/debian stable main contrib non-free
and run:
sudo apt update
see https://wiki.debian.org/DebianRepository

Debian version check:
hostnamectl

some package requires GPG signing key:
to manage it, install dirmngr by:
sudo apt install dirmngr

ghc Haskell compiler install on Debian:
https://downloads.haskell.org/~debian/
sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys BA3CBA3FFE22B574
sudo apt update
sudo apt install ghc
sudo apt install cabal

[install memo]
libboost-all-dev gcc-8-multilib g++-8-multilib gdb python3-pip (pip3 as command)
ipython3 python3-ipdb cmake
libopenblas-dev liblapack-dev #<- enhance dlib performance
pkg-config
sqlite3 libsqlite3-dev

dlib: machine learning library for C++/Python
http://dlib.net/
to install:
# (failed) sudo pip install dlib

git clone https://github.com/davisking/dlib
sudo python setup.py install # <- failed by insufficient memory in compiling matrix function

nvidia-cuda-toolkit:
sudo apt install linux-headers-$(uname -r)
sudo apt -y install nvidia-cuda-dev nvidia-cuda-toolkit nvidia-driver
https://tutorialforlinux.com/2018/02/06/how-to-install-cuda-for-debian-stretch-9-64bit-step-by-step/3/

As in Google Cloud Platform textbook:
python-pip python-dev python-wtforms
python-arrow python-flask-sqlalchemy
python-pymysql python-flaskext.wtf

Python modules set by pip3
jinja2

[pkg-config]
pkg-config --cflags --libs sqlite3 (or any library)

[ssh key creation]
connect Github:
see https://qiita.com/shizuma/items/2b2f873a0034839e47ce
ssh-keygen -t rsa
here, -t for encrypt type (RSA)
pass phrase can be skipped

verify files created in ~/.ssh/

Open the Github key setting page:
https://github.com/settings/keys
and press NewSSH key button
copy and paste all text in id_rsa.pub

To verify authentification,
ssh -T git@github.com
(type yes to 'continue to connect?' message,
then a greeting will be returned)

Create .gitconfig file at home directory and write email and name
(reference the existing one) to issue an initial commit.

git clone [url of one of my own repository]
open ./.git/config and rewrite the url value:
url = git@github.com:YugoOsano/cppmemo.git

or, rewriting the url can be skipped when cloning by:
git clone git@github.com:YugoOsano/cppmemo.git

-----
connect Gitlab
copy and paste all text in (~/.ssh/) id_rsa.pub
to https://gitlab.com/-/profile/keys

ssh -T git@gitlab.com
(to verify authentification; welcome will be returned)

[web server creation]
https://techblog.gmo-ap.jp/2019/07/08/10minutes-gce/
select VM to edit its setting -> check permission of firewall on http

install http daemon
sudo apt install apache2 (or whichever shown by sudo apt install httpd)
sudo systemctl start httpd.service

start a web browser to open http://[external IP on VW setting page]

to see status:
sudo systemctl status httpd.service

to stop
sudo systemctl stop httpd.service
uncheck firewall

simplest Python web server
https://sinyblog.com/python/simple_web_server/

[docker]
https://cloud.google.com/compute/docs/containers
https://docs.docker.com/install/linux/docker-ce/debian/

Installing was attempted according to the following:
https://qiita.com/yadayuki/items/ae9d9e01bad769499dec
but was likely to fail and 'Dependency failed...' error came up on
any apt install/remove manipulation. It was resolved by
sudo apt autoremove docker-ce
--------------------------------
Sakura VPS setting
Control panel
https://secure.sakura.ad.jp/vps/#/login

reinstall OS:
select server on the control panel
->mis. setting button->OS install
-> standard OS (from CentOS 6,7 on x86_64, Ubuntu16, 18 on amd64)
-> Ubuntu 18 (admin user name is automatically set as 'ubuntu')
-> port permission: left as default

remove known hosts from ssh-key by
ssh-keygen -f "/home/yugo/.ssh/known_hosts" -R [ip address]

Initial setting guide of Sakura VPS
https://help.sakura.ad.jp/206208181/

installed: eigen3.3.7 gcc-8.3.0 cmake llvm
----------------------------
write a image of Raspbian OS

https://toripiyo.hatenablog.com/entry/2018/05/05/122758
(though this is for Mac)

download an image etcher from: 
https://sourceforge.net/projects/win32diskimager/

Windows needs a device driver:
https://qiita.com/msquare33/items/dc6fc9098f50d9b9dbf2

USB connection by Japanese Raspberry Pi user group
https://www.raspi.jp/2016/07/pizero-usb-otg/
---------------------------
[tmux] memo
$tmux -> :new (start a new session)
$tmux ls      (show all session)
$tmux kill-ses -t [number of session] (delete session)

[Ctrl + b] ->
? (show key bind list) -> q to quit
s (show all session)
c (new window)
w (show all window)
& (delete window)
" (split pain holizontally)
% (split pain vertically)
cursor (move pain)
see "minimum lesson of tmux": https://qiita.com/nl0_blu/items/9d207a70ccc8467f7bab
-----------------------------
[vim] memo
:e [file] -> open a file in the current buffer
:e [Ctrl+d] -> list files in the current directory
:se enc?  -> return character encoding (UTF8)
-----------------------------
[WSL2] memo
Python (optimized), Numpy/Scipy, IntelMKL
https://qiita.com/osanshouo/items/7a729aabf65a70ad6762
https://osanshouo.github.io/blog/2021/03/20-python-build/
(installed at ~/.local/bin)
Command line to install the latest MKL is indicated in
https://www.intel.com/content/www/us/en/developer/tools/oneapi/base-toolkit-download.html?operatingsystem=linux&distributions=webdownload&options=offline
(wget, sh)
Intel Math Kernel Library (MKL) Cookbook
https://jp.xlsoft.com/documents/intel/mkl/11.2/mkl112_cookbook_book.pdf
Heat transfer (Diffusion) equation resolved by BLAS, PARDISO
[HDF5]
sudo apt-get install libhdf5-serial-dev
sudo apt-get install hdf5-tools

[NodeJS]
https://zenn.dev/keijiek/articles/4976559b876090
nvm, npm will be installed under $HOME/.nvm
see if curl already exists by:
$ command -v curl
initially install nvm (Node version manager) by curl command copied from:
https://github.com/nvm-sh/nvm#installing-and-updating

after verifying setting appended at the end of .bashrc,
$ source ~/.bashrc  (-> nvm can be run)

to install node (npm)
$ nvm install node   (node is the alias of the stable version, where aliases can be listed by $ nvm alias)
